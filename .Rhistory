myvec
myvec
myvec <- c(1:10, 21:35)
myvec
mymat <- matrix(myvec, nrow=5)
mymat
mymat[1:3, 3:5]
rownames(mymat) <- paste0('r', 1:5)
colnames(mymat) <- paste0('c', 1:5)
mymat
myvec2 <- c("John", "Beth")
myfact2 <- as.factor(myvec2)
myfact2
as.numeric(myfact2)
```
install.packages("KernSmooth")
library("KernSmoot")
library("KernSmooth")
library("KernSmooth")
# The goal of this file is to introduce you to the
# R programming language. Let's start with by unraveling a
# little mystery!
# 1. Run the code below to create the vector 'udacious'.
# You need to highlight all of the lines of the code and then
# run it. You should see "udacious" appear in the workspace.
udacious <- c("Chris Saden", "Lauren Castellano",
"Sarah Spikes","Dean Eckles",
"Andy Brown", "Moira Burke",
"Kunal Chawla")
# You should see something like "chr[1:7]" in the 'Environment'
# or 'Workspace' tab. This is because you created a 'vector' with
# 7 names that have a 'type' of character. The arrow-like
# '<-' symbol is the assignment operator in R, similar to the
# equal sign '=' in other programming languages. The c() is a
# generic function that combines arguments, in this case the
# names of people, to form a vector.
# A 'vector' is one of the data types in R. Vectors must contain
# the same type of data, that is the entries must all be of the
# same type: character (most programmers call these strings),
# logical (TRUE or FALSE), or numeric.
# Print out the vector udacious by running this next line of code.
udacious
# Notice how there are numbers next to the output.
# Each number corresponds to the index of the entry in the vector.
# Chris Saden is the first entry so [1]
# Dean Eckles is the fourth entry so [4]
# Kunal Chawla is the seventh entry so [7]
# Depending on the size of you window you may see different numbers
# in the output.
# ANOTHER HELPFUL TIP: You can add values to a vector.
# Run each line of code one at a time below to see what is happening.
numbers <- c(1:10)
numbers
numbers <- c(numbers, 11:20)
numbers
# 2. Replace YOUR_NAME with your actual name in the vector
# 'udacious' and run the code. Be sure to use quotes around it.
udacious <- c("Chris Saden", "Lauren Castellano",
"Sarah Spikes","Dean Eckles",
"Andy Brown", "Moira Burke",
"Kunal Chawla", YOUR_NAME)
# Notice how R updates 'udacious' in the workspace.
# It should now say something like 'chr[1:8]'.
# 3. Run the following two lines of code. You can highlight both lines
# of code and run them.
mystery = nchar(udacious)
mystery
# You just created a new vector called mystery. What do you
# think is in this vector? (scroll down for the answer)
# Mystery is a vector that contains the number of characters
# for each of the names in udacious, including your name.
# 4. Run this next line of code.
mystery == 11
# Here we get a logical (or boolean) vector that tells us
# which locations or indices in the vector contain a name
# that has exactly 11 characters.
# 5. Let's use this boolean vector, mystery, to subset our
# udacious vector. What do you think the result will be when
# running the line of code below?
# Think about the output before you run this next line of code.
# Notice how there are brackets in the code. Brackets are often
# used in R for subsetting.
udacious[mystery == 11]
# Scroll down for the answer
# It's your Udacious Instructors for the course!
# (and you may be in the output if you're lucky enough
# to have 11 characters in YOUR_NAME) Either way, we
# think you're pretty udacious for taking this course.
# 6. Alright, all mystery aside...let's dive into some data!
# The R installation has a few datasets already built into it
# that you can play with. Right now, you'll load one of these,
# which is named mtcars.
# Run this next command to load the mtcars data.
data(mtcars)
# You should see mtcars appear in the 'Environment' tab with
# <Promise> listed next to it.
# The object (mtcars) appears as a 'Promise' object in the
# workspace until we run some code that uses the object.
# R has stored the mtcars data into a spreadsheet-like object
# called a data frame. Run the next command to see what variables
# are in the data set and to fully load the data set as an
# object in R. You should see <Promise> disappear when you
# run the next line of code.
# Visit http://cran.r-project.org/doc/manuals/r-release/R-lang.html#Promise-objects
# if you want the expert insight on Promise objects. You won't
# need to the info on Promise objects to be successful in this course.
names(mtcars)
# names(mtcars) should output all the variable
# names in the data set. You might notice that the car names
# are not a variable in the data set. The car names have been saved
# as row names. More on this later.
# You should also see how many observations (obs.) are in the
# the data frame and the number of variables on each observation.
# 7. To get more information on the data set and the variables
# run the this next line of code.
?mtcars
# You can type a '?' before any command or a data set to learn
# more about it. The details and documentation will appear in
# the 'Help' tab.
# 8. To print out the data, run this next line as code.
mtcars
# Scroll up and down in the console to check out the data.
# This is the entire data frame printed out.
# 9. Run these next two functions, one at a time,
# and see if you can figure out what they do.
str(mtcars)
dim(mtcars)
# Scroll down for the answer.
# The first command, str(mtcars), gives us the structure of the
# data frame. It lists the variable names, the type of each variable
# (all of these variables are numerics) and some values for each
# variable.
# The second command, dim(mtcars), should output '[1] 32 11'
# to the console. The [1] indicates that 32 is the first value
# in the output.
# R uses 1 to start indexing (AND NOT ZERO BASED INDEXING as is true
# of many other programming languages.)
# 10. Read the documentation for row.names if you're want to know more.
?row.names
# Run this code to see the current row names in the data frame.
row.names(mtcars)
# Run this code to change the row names of the cars to numbers.
row.names(mtcars) <- c(1:32)
# Now print out the data frame by running the code below.
mtcars
# It's tedious to relabel our data frame with the right car names
# so let's reload the data set and print out the first ten rows.
data(mtcars)
head(mtcars, 10)
# The head() function prints out the first six rows of a data frame
# by default. Run the code below to see.
head(mtcars)
# I think you'll know what this does.
tail(mtcars, 3)
# 11. We've run nine commands so far:
#      c, nchar, data, str, dim, names, row.names, head, and tail.
# All of these commands took some inputs or arguments.
# To determine if a command takes more arguments or to learn
# about any default settings, you can look up the documentation
# using '?' before the command, much like you did to learn about
# the mtcars data set and the row.names
# 12. Let's examine our car data more closely. We can access an
# an individual variable (or column) from the data frame using
# the '$' sign. Run the code below to print out the variable
# miles per gallon. This is the mpg column in the data frame.
mtcars$mpg
# Print out any two other variables to the console.
# This is a vector containing the mpg (miles per gallon) of
# the 32 cars. Run this next line of code to get the average mpg for
# for all the cars. What is it?
# Enter this number for the quiz on the Udacity website.
# https://www.udacity.com/course/viewer#!/c-ud651/l-729069797/e-804129314/m-830829287
mean(mtcars$mpg)
library(swirl)
install_from_swirl("Exploratory Data Analysis")
install_from_swirl("Exploratory Data Analysis")
swirl()
head(0)
info()
head(pollution)
dim(pollution)
summary(pollution$pm25)
summary(ppm)
quantile(pp,)
quantile(ppm)
boxplot(ppm, data=pollution, color='blue')
boxplot(ppm, col='blue')
abline(h=12)
hist(ppm,col='green')
rug(ppm)
summary(low)
info(low)
info
info()
low
high
hist(ppm,col='green', break=100)
hist(ppm,col='green', breaks=100)
rug(ppm)
hist(ppm,col='green')
hist(ppm,col='green', v=12, lwd=2)
abline(v=12, lwd=2)
abline(v=neduab(oom), col='magenta', lwd=4)
abline(v=median(ppm), col='magenta', lwd=4)
names(pollution)
table(pollution$region)
reg <- table(pollution$region)
reg
barplot(reg, col='wheat', main="Number of Counties in Each Region")
boxplot(pm25 ~ region, data=pollution, col='red')
par(mfrow=c(2,1),mar=c(4,4,2,1))
subset(pollution, region="east")
east <- subset(pollution, region="east")
east <- subset(pollution, region=="east")
head(east)
hist(east$pm25, col='green')
hist(susbset(pollution, region=="west")$pm25) col='green')
hist((susbset(pollution, region=="west")$pm25) col='green')
hist((susbset(pollution, region=="west")$pm25), col='green')
hist((subset(pollution, region=="west")$pm25), col='green')
hist(subset(pollution,region=="west")$pm25, col = "green")
names(pollution,plot() )
names(pollution,plot(lattitude, pm25) )
names(pollution)
names(pollution,plot(latitude, pm25) )
plot(pollution$latitude, pollution$pm25)
with(pollution, plot(latitude, pm25)) at the command prompt.
with(pollution, plot(latitude, pm25))
abline(lwd=2, lty=2)
abline(v=2,lwd=2, lty=2)
abline(h=12,lwd=2, lty=2)
plot(pollution$latitude, pollution$pm25, col=pollution$region)
plot(pollution$latitude, ppm, col=pollution$region)
abline(h=12,lwd=2, lty=2)
par(mfrow = c(1, 2), mar = c(5, 4, 2, 1))
west <- subset(pollution, region=="west"
)
plot(west$latitude, west(pm25, main="west")
)
plot(west$latitude, west$pm25, main="west")
plot(west$latitude, west$pm25, main="West")
plot(east$latitude, east$pm25, main="East")
library("ggplot2")
pf <- read.csv("~/EDA_R/pseudo_facebook.tsv",sep = '\t')
hist(x = friend_count, data = pf)
qplot(x = friend_count, data = pf)
qplot(x = friend_count, data = pf, binwidth=25)
qplot(x = friend_count, data = pf, xlim(c(0,1000)))
qplot(x = friend_count, data = pf, xlim =(c(0,1000)))
qplot(x = friend_count, data = pf, scale_x_continuous(limits = c(0, 1000)))
qplot(x = friend_count, data = pf)+
scale_x_continuous(limits = c(0, 1000))
facet_map(gender, qplot(x = friend_count, data = pf)+
scale_x_continuous(limits = c(0, 1000), breaks = seq(0, 1000, 50)))
qplot(x = friend_count, data = pf)+
scale_x_continuous(limits = c(0, 1000), breaks = seq(0, 1000, 50))
facet_wrapt(~gender)
facet_wrap(~gender)
qplot(x = friend_count, data = pf)+
scale_x_continuous(limits = c(0, 1000), breaks = seq(0, 1000, 50))
facet_wrap(~gender)
qplot(x = friend_count, data = pf)+
scale_x_continuous(limits = c(0, 1000), breaks = seq(0, 1000, 50)) +
facet_wrap(~gender)
qplot(x = friend_count, data = pf, binwidth = 25)+
scale_x_continuous(limits = c(0, 1000), breaks = seq(0, 1000, 50)) +
facet_wrap(~gender)
qplot(x = friend_count, data = subset(pf, is.na(gender), binwidth = 25)+
scale_x_continuous(limits = c(0, 1000), breaks = seq(0, 1000, 50)) +
facet_wrap(~gender)
exit
qplot(x = friend_count, data = subset(pf, is.na(gender)), binwidth = 25)+
scale_x_continuous(limits = c(0, 1000), breaks = seq(0, 1000, 50)) +
facet_wrap(~gender)
qplot(x = friend_count, data = subset(pf, !is.na(gender)), binwidth = 25)+
scale_x_continuous(limits = c(0, 1000), breaks = seq(0, 1000, 50)) +
facet_wrap(~gender)
by(pf$friend_count, pf$gender, summary)
qplot(x = tenure / 365, data = pf, binwidth = .25,
color = I('black'),fill = I('#099DD9'))
qplot(x = age, data = subset(pf, !is.na(gender)), binwidth = 25)+
scale_x_continuous(limits = c(0, 1000), breaks = seq(0, 1000, 50)) +
facet_wrap(~gender)
qplot(x = age, data = subset(pf, !is.na(gender)), binwidth = 1)+
facet_wrap(~gender)
qplot(x = age , data = subset(pf,!is.na(gender)),binwidth = 1,
xlab = 'Facebook Users by Age',
ylab = 'Number of users in sample',
color = I('black'), fill = I('#099DD9')) +
scale_x_continuous(breaks = seq(10,120,10), limits = c(10,120)) +
facet_wrap(~gender)
install.packages("gridExtra")
library(gridExtra)
#create each plot and assign to a variable
p1 <- qplot(x = friend_count, data = pf)
p2 <- qplot(x = friend_count, data = pf) +
scale_x_log10()
p3 <- qplot(x = friend_count, data = pf) +
scale_x_sqrt()
#use grid.arrange to plot
grid.arrange(p1,p2,p3, ncol = 1)
qplot(x = www_likes,
data = subset(pf,!is.na(gender)),
geom = 'freqpoly', color = gender,
xlab = 'WWW Likes',
ylab = 'Proportion of Users with that www like count'
) +
scale_x_continuous() +
scale_x_log10()
by(pf$www_likes,pf$gender,sum)
qplot(x = gender, y = friend_count,
data = subset(pf, !is.na(gender)),
geom = 'boxplot' , ylim = c(0, 1000))
qplot(x = gender, y = friendships_initiated,
data = subset(pf, !is.na(gender)),
geom = 'boxplot') +
coord_cartesian(ylim = c(0,500))
qplot(x = gender, y = friendships_initiated,
data = subset(pf, !is.na(gender)),
geom = 'boxplot') +
coord_cartesian(ylim = c(0,150))
by(pf$friendships_initiated,pf$gender,summary)
pf$mobile_check_in <- NA
### use a logical operator to assign 1 or 0 if a user has checked in
pf$mobile_check_in <- ifelse(pf$mobile_likes > 0,1,0)
###convert to a factor variable
pf$mobile_check_in <- factor(pf$mobile_check_in)
summary(pf$mobile_check_in)
sum(pf$mobile_check_in == 1) / length(pf$mobile_check_in)
data(diamonds)
summary(diamonds
)
#check and validate with numerical summary
by(diamonds$price/diamonds$carat,diamonds$color, summary)
qplot(x = price, data = diamonds)
summary(diamonds$price)
summary(diamonds$price < 501)
summary(diamonds$price < 251)
summary(diamonds$price >= 15000)
summary(diamonds$price < 500)
summary(diamonds$price < 250)
qplot(x = price , data = diamonds,
binwidth = 1,
color = I('black'), fill = I('#099DD9'),
xlab = 'Price of Diamonds',
ylab = 'Count of Diamonds in sample') +
scale_x_continuous(limits = c(670,700), breaks = seq(600,1000,5))
qplot(x = price , data = diamonds,
binwidth = 1,
color = I('black'), fill = I('#099DD9'),
xlab = 'Price of Diamonds',
ylab = 'Count of Diamonds in sample') +
scale_x_continuous(limits = c(670,700), breaks = seq(600,1000,5)) +
facet_wrap(~cut)
by(diamonds$price, diamonds$cut,max)
by(diamonds$price, diamonds$cut,min)
by(diamonds$price, diamonds$cut,median)
qplot(x = price, data = diamonds) + facet_wrap(~cut)
qplot(x = price, data = diamonds) + facet_wrap(~cut, scales = free_y)
qplot(x = price, data = diamonds) + facet_wrap(~cut, scales = 'free_y')
qplot(x = price/carat, data = diamonds) +
facet_wrap(~cut, scales = 'free_y')
qplot(x = price/carat, data = diamonds) +
facet_wrap(~cut, scales = 'free_y') +
scale_x_log10()
qplot(x=color,y = price/carat,data = diamonds,
geom = "boxplot")
qplot(x=color,y = price/carat,data = diamonds,
geom = "boxplot")+
coord_cartesian(ylim = c(1500,6500))
by(diamonds$price/diamonds$carat,diamonds$color, summary)
by(diamonds$price,diamonds$color,IQR)
by(diamonds$price,diamonds$color,summary)
qplot(x = price , data = diamonds,
binwidth = 1,
color = I('black'), fill = I('#099DD9'),
xlab = 'Price of Diamonds',
ylab = 'Count of Diamonds in sample') +
scale_x_continuous(limits = c(670,700), breaks = seq(600,1000,5)) +
facet_wrap(~cut, scales = 'free_y')
qplot(x = carat,
data = diamonds,
geom = 'freqpoly',
xlab = 'Carat',
ylab = 'Count of diamonds in the sample'
) +
scale_x_continuous(breaks = seq(0,6,0.1)) +
scale_y_continuous(breaks = seq(0,9000,1000))
ggsave('priceHistogram.png')
qplot(x = carat,binwidth=1
data = diamonds,
geom = 'freqpoly',
xlab = 'Carat',
ylab = 'Count of diamonds in the sample'
) +
scale_x_continuous(breaks = seq(0,6,0.1)) +
scale_y_continuous(breaks = seq(0,9000,1000))
qplot(x = carat,binwidth=1,
data = diamonds,
geom = 'freqpoly',
xlab = 'Carat',
ylab = 'Count of diamonds in the sample'
) +
scale_x_continuous(breaks = seq(0,6,0.1)) +
scale_y_continuous(breaks = seq(0,9000,1000))
qplot(x = carat,binwidth=10,
data = diamonds,
geom = 'freqpoly',
xlab = 'Carat',
ylab = 'Count of diamonds in the sample'
) +
scale_x_continuous(breaks = seq(0,6,0.1)) +
scale_y_continuous(breaks = seq(0,9000,1000))
qplot(x = carat,binwidth=.5,
data = diamonds,
geom = 'freqpoly',
xlab = 'Carat',
ylab = 'Count of diamonds in the sample'
) +
scale_x_continuous(breaks = seq(0,6,0.1)) +
scale_y_continuous(breaks = seq(0,9000,1000))
qplot(x = carat,
data = diamonds,
geom = 'freqpoly',
xlab = 'Carat',
ylab = 'Count of diamonds in the sample'
) +
scale_x_continuous(breaks = seq(0,6,0.1)) +
scale_y_continuous(breaks = seq(0,9000,1000))
qplot(x = carat,
data = diamonds,binwidth=.2
geom = 'freqpoly',
xlab = 'Carat',
ylab = 'Count of diamonds in the sample'
) +
scale_x_continuous(breaks = seq(0,6,0.1)) +
scale_y_continuous(breaks = seq(0,9000,1000))
qplot(x = carat,
data = diamonds,binwidth=.2,
geom = 'freqpoly',
xlab = 'Carat',
ylab = 'Count of diamonds in the sample'
) +
scale_x_continuous(breaks = seq(0,6,0.1)) +
scale_y_continuous(breaks = seq(0,9000,1000))
install.packages("kintr")
show?
exit
install.packages(c("httpuv", "KernSmooth", "lme4", "manipulate", "mime", "R6", "Rcpp", "shiny", "stringi", "testthat", "xtable"))
install.packages(c("httpuv", "KernSmooth", "lme4", "manipulate",
install.packages(c("httpuv", "KernSmooth", "lme4", "manipulate", "mime", "R6", "Rcpp", "shiny", "stringi", "testthat", "xtable"))
install.packages("R6")
install.packages("Rcpp")
install.packages("Rcpp")
install.packages("Rcpp")
install.packages("Rcpp")
install.packages("Rcpp")
install.packages("KernSmooth")
install.packages("httpuv")
install.packages("lme4")
install.packages("manipulate")
install.packages("mime")
install.packages("shiny")
install.packages("stringi")
install.packages("testthat")
install.packages("xtable")
install.packages("knitr")
setwd("~/GitHub/RepData_PeerAssessment1")
